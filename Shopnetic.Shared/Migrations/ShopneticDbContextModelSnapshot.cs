// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shopnetic.Shared.Database;

#nullable disable

namespace Shopnetic.Shared.Migrations
{
    [DbContext(typeof(ShopneticDbContext))]
    partial class ShopneticDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shopnetic.Shared.Database.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartId"));

                    b.Property<string>("CartContentsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CartOwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CartId");

                    b.HasIndex("CartOwnerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.CartOwner", b =>
                {
                    b.Property<int>("CartOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CartOwnerId"));

                    b.Property<string>("CartOwnerType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CartOwnerId");

                    b.ToTable("CartOwners");

                    b.HasDiscriminator<string>("CartOwnerType").HasValue("CartOwner");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");

                    b.HasDiscriminator<string>("DiscountType").HasValue("Discount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.DiscountCode", b =>
                {
                    b.Property<int>("DiscountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountCodeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("DiscountCodeId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CartOwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("boolean");

                    b.HasKey("OrderId");

                    b.HasIndex("CartOwnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.OrderDiscount", b =>
                {
                    b.Property<int>("OrderDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderDiscountId"));

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("OrderDiscountId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDiscounts");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AmountWithoutDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("CartOwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeclinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeclinedReason")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeclined")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("numeric");

                    b.HasKey("PaymentId");

                    b.HasIndex("CartOwnerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductImageId"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ImageMimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductInventory", b =>
                {
                    b.Property<int>("ProductInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductInventoryId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LowStockThreshold")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ProductInventoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInventories");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductPriceId"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.UserSession", b =>
                {
                    b.Property<Guid>("UserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenHash")
                        .HasColumnType("text");

                    b.Property<string>("RevocationReason")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.AnonymousCartOwner", b =>
                {
                    b.HasBaseType("Shopnetic.Shared.Database.CartOwner");

                    b.Property<Guid>("UserSessionId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserSessionId");

                    b.HasDiscriminator().HasValue("Anonymous");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.RegisteredCartOwner", b =>
                {
                    b.HasBaseType("Shopnetic.Shared.Database.CartOwner");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Registered");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.CartDiscount", b =>
                {
                    b.HasBaseType("Shopnetic.Shared.Database.Discount");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.HasIndex("CartId");

                    b.HasDiscriminator().HasValue("Cart");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductDiscount", b =>
                {
                    b.HasBaseType("Shopnetic.Shared.Database.Discount");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts", t =>
                        {
                            t.Property("DiscountAmount")
                                .HasColumnName("ProductDiscount_DiscountAmount");
                        });

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Cart", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.CartOwner", "CartOwner")
                        .WithMany("Carts")
                        .HasForeignKey("CartOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartOwner");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.DiscountCode", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Order", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.CartOwner", "CartOwner")
                        .WithMany("Orders")
                        .HasForeignKey("CartOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartOwner");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.OrderDiscount", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopnetic.Shared.Database.Order", "Order")
                        .WithMany("OrderDiscounts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.OrderItem", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Payment", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.CartOwner", "CartOwner")
                        .WithMany("Payments")
                        .HasForeignKey("CartOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopnetic.Shared.Database.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartOwner");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductCategory", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductImage", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductInventory", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductPrice", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.UserSession", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.AnonymousCartOwner", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.RegisteredCartOwner", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.CartDiscount", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.ProductDiscount", b =>
                {
                    b.HasOne("Shopnetic.Shared.Database.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.CartOwner", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Order", b =>
                {
                    b.Navigation("OrderDiscounts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Shopnetic.Shared.Database.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
